[package]
name = "pueue"
version = "4.0.0-rc.1"
description = "A cli tool for managing long running shell commands."
readme = "../README.md"
keywords = ["command", "parallel", "queue", "shell", "task"]
authors.workspace = true
edition.workspace = true
homepage.workspace = true
license.workspace = true
repository.workspace = true
rust-version.workspace = true

[badges]
maintenance = { status = "actively-developed" }

[dependencies]
chrono.workspace = true
clap = { version = "4.4.18", features = [
    "cargo",
    "derive",
    "help",
    "wrap_help",
] }
clap_complete = "4.4.10"
clap_complete_nushell = "4.4.2"
color-eyre.workspace = true
comfy-table = "7"
command-group.workspace = true
ctrlc = { version = "3", features = ["termination"] }
handlebars.workspace = true
interim = { version = "0.1.2", features = ["chrono"] }
pest = "2.7"
pest_derive = "2.7"
pueue-lib = { version = "0.27.0", path = "../pueue_lib" }
serde.workspace = true
serde_json.workspace = true
shell-escape = "0.1"
snap.workspace = true
strum.workspace = true
tempfile = "3"
tokio.workspace = true
toml = "0.8"
tracing.workspace = true
tracing-error = "0.2.1"
tracing-subscriber = { version = "0.3.19", features = [
    "chrono",
    "env-filter",
    "fmt",
    "local-time",
] }

[dev-dependencies]
assert_cmd = "2"
assert_matches = "1"
better-panic.workspace = true
pretty_assertions.workspace = true
rstest = "0.24"
serde_yaml.workspace = true
similar-asserts = "1"
tracing-test = "0.2.5"

# Make it easy to view log output for select tests.
# Set log level for tests with RUST_LOG=<level>, use with failed tests or
# disable test stdout/stderr capture (`cargo test -- --nocapture` / `cargo
# nextest run --no-capture`)
tracing-subscriber = { version = "*", features = [
    "chrono",
    "env-filter",
    "fmt",
    "local-time",
] }

# We don't need any of the default features for crossterm.
# However, the windows build needs the windows feature enabled.
[target.'cfg(not(windows))'.dependencies]
crossterm = { version = "0.28", default-features = false }
[target.'cfg(windows)'.dependencies]
crossterm = { version = "0.28", default-features = false, features = [
    "windows",
] }
windows = { version = "0.58.0", features = [
    "Win32_Security",
    "Win32_System_Environment",
    "Win32_System_RemoteDesktop",
    "Win32_System_SystemServices",
    "Win32_System_Threading",
] }
windows-service = "0.7.0"

# Test specific dev-dependencies
[target.'cfg(any(target_os = "linux", target_os = "freebsd", target_os = "netbsd"))'.dependencies]
whoami = "1"

# Test specific Linux dev-dependencies
[target.'cfg(target_os = "linux")'.dependencies]
procfs = { version = "0.17", default-features = false }
